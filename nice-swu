#!/bin/bash
#
# my version of https://www.jamf.com/jamf-nation/discussions/28280/a-nicer-software-update-tool
#
###
#
#            Name:  SWUpdateNice.sh
#     Description:  This script, meant to be triggered every Thursday if updates
#                   are detected by 'softwareupdate' that require a re-start. Users are
#                   given a countdown to choose the option to re-start or deferral
#                   the update until 4:30PM EST.
#                   A LaunchDaemon is used to trigger the update at 4:30PM EST. The
#                   the computer will be required to restart at that time.
#
#          Author:  Michael Litton <michael@bfatechnologies.com>
#         Created:  2018-12-04
#   Last Modified:  2018-01-15
#         Version:  1.0
#
#   Derived from : Elliot Jordan <elliot@elliotjordan.com> - install_or_defer.sh
#                : https://github.com/homebysix/install-or-defer
#                : Christopher <Taboc741>
#                : https://www.jamf.com/jamf-nation/discussions/28280/a-nicer-software-update-tool
#
#                : assistance from @atlas and @ehemmete on MacAdmins Slack
###
#
############################### VARIABLES ######################################

OSVERSION=$(sw_vers -productVersion)                   # determine OS versions
LOGGEDINUSER=$(who | grep console | awk '{print $1}')  # who is current user
JAMFHELPER="/Library/Application Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper"

# Check for updates that require a restart and ones that do not.
SWU_NO_RESTART=$(softwareupdate -l | grep recommended | grep -v restart)
SWU_RESTART=$(softwareupdate -l | grep restart | grep -v '\*' | cut -d , -f 1)
SWU_SHUTDOWN=$(softwareupdate -l | grep shutdown | grep -v '\*' | cut -d , -f 1)

# Logging
LOG_PATH="/tmp/log"
LOG_FILE="/tmp/log/swupdatenice.log"

############################## FUNCTIONS #######################################

# Send echo to log file
sendtolog (){
echo "$(date +"%Y-%b-%d %T") : $1" | tee -a "$LOG_FILE"
}


create_daemon(){
# Create the LaunchDaemon
cat << EOF > "/Library/LaunchDaemons/com.restart.plist"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.restart</string>
    <key>ProgramArguments</key>
    <array>
        <string>/usr/bin/su</string>
        <string>/private/tmp/deferrestart.sh</string>
    </array>
    <key>StartCalendarInterval</key>
    <dict>
        <key>Hour</key>
        <integer>16</integer>
        <key>Minute</key>
        <integer>30</integer>
    </dict>
    <key>StandardErrorPath</key>
    <string>/tmp/restart.log</string>
    <key>StandardOutPath</key>
    <string>/tmp/restart.log</string>
</dict>
</plist>
EOF
}


create_script(){
# Create a jamfHelper script that will be called by a LaunchDaemon.
cat << EOF > "/private/tmp/deferrestart.sh"
#!/bin/bash
"/Library/Application Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper" \
-windowType hud \
-title "IT Department" \
-heading "Computer Reboot required" \
-alignHeading left \
-description "The computer now needs to re-boot. You have 30 seconds before the re-boot." \
-alignDescription left \
-icon '/System/Library/CoreServices/Install Command Line Developer Tools.app/Contents/Resources/SoftwareUpdate.icns' \
-iconSize 64 \
-timeout 300 \
-countdown \
-lockHUD

/bin/launchctl unload -w "/Library/LaunchDaemons/com.restart.plist"

/bin/mv "/Library/LaunchDaemons/com.restart.plist" "/private/tmp/"

/bin/rm -rf "/private/tmp/com.restart.plist"
/bin/rm -rf "/private/tmp/deferrestart.sh"

#/sbin/shutdown -r now
/usr/local/bin/jamf reboot -background -immediately

EOF
}




############################# START ###########################################

# Make folder and write the log file to it
if [ ! -d "$LOG_PATH" ];then mkdir /tmp/log; fi
#
sendtolog "Beginning script"
sendtolog "$LOGGEDINUSER is running $OSVERSION"
sendtolog "SWU_NO_RESTART value is:$SWU_NO_RESTART"
sendtolog "SWU_RESTART value is:$SWU_RESTART"
sendtolog "SWU_SHUTDOWN value is: $SWU_SHUTDOWN"

# Caffienate
sendtolog "Begin caffeination"
/usr/bin/caffeinate -dis &
caffeinatePID=$!

# If there are no software updates then recon and quit
if [[ $SWU_NO_RESTART != "" && $SWU_RESTART = "" ]]; then
  sendtolog "Only recommended software available, installing silently"
  softwareupdate -i --recommended
  sendtolog "Software downloads completed"
  /usr/local/bin/jamf recon

elif [[ $SWU_RESTART != "" || $SWU_SHUTDOWN != "" ]]; then
  sendtolog "Beginning software downloads"
  softwareupdate -i --all
  sendtolog "Downloads complete, begin prompt"


  RESULT=$("$JAMFHELPER" \
  -windowType hud \
  -title "IT Department" \
  -heading "Computer Reboot required" \
  -alignHeading left \
  -description "Software has been updated that requires a re-boot of the computer. If you select REBOOT it will begin immediately. If you select DEFER it will reboot at 4:30PM EST. There is no option to defer the 4:30 reboot. Please make your selelction within 2 minutes." \
  -alignDescription left \
  -icon '/System/Library/CoreServices/Install Command Line Developer Tools.app/Contents/Resources/SoftwareUpdate.icns' \
  -iconSize 64 \
  -button1 "REBOOT" \
  -button2 "DEFER" \
  -timeout 600 \
  -countdown \
  -lockHUD)


      if [[ $RESULT == 0 ]]; then
      # do button1 stuff
          sendtolog "Re-boot was pressed!"
          shutdown -r now &


      elif [[ $RESULT == 2 ]]; then
      # do button2 stuff
      create_script
      create_daemon
      # give permissions
      chmod 755 "/private/tmp/deferrestart.sh"
      chmod 644 "/Library/LaunchDaemons/com.restart.plist"
      # load Daemon
      launchctl load -w "/Library/LaunchDaemons/com.restart.plist"



# If you schedule a launchd job by setting the StartCalendarInterval key and the 
# computer is asleep when the job should have run, your job will run when the 
# computer wakes up. However, if the machine is off when the job should have run, 
# the job does not execute until the next designated time occurs.

      fi
  fi

  exit 0
